                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11528 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module ch376s
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _delay_ms
                             12 	.globl _write_data_multiple
                             13 	.globl _read_data_multiple
                             14 	.globl _read_status
                             15 	.globl _read_data
                             16 	.globl _write_data
                             17 	.globl _write_command
                             18 	.globl _strlen
                             19 	.globl _ch376_reset_all
                             20 	.globl _ch376_plugged_in
                             21 	.globl _ch376_set_usb_host_mode
                             22 	.globl _ch376_connect_disk
                             23 	.globl _ch376_mount_disk
                             24 	.globl _ch376_wait_status
                             25 	.globl _ch376_get_register_value
                             26 	.globl _ch376_set_filename
                             27 	.globl _ch376_open_file
                             28 	.globl _ch376_close_file
                             29 	.globl _ch376_open_directory
                             30 	.globl _ch376_open_search
                             31 	.globl _ch376_next_search
                             32 	.globl _ch376_get_fat_info
                             33 	.globl _ch376_locate_sector
                             34 	.globl _ch376_get_sector_LBA
                             35 	.globl _ch376s_disk_read
                             36 	.globl _ch376s_disk_write
                             37 ;--------------------------------------------------------
                             38 ; special function registers
                             39 ;--------------------------------------------------------
                             40 ;--------------------------------------------------------
                             41 ; ram data
                             42 ;--------------------------------------------------------
                             43 	.area _DATA
                             44 ;--------------------------------------------------------
                             45 ; ram data
                             46 ;--------------------------------------------------------
                             47 	.area _INITIALIZED
                             48 ;--------------------------------------------------------
                             49 ; absolute external ram data
                             50 ;--------------------------------------------------------
                             51 	.area _DABS (ABS)
                             52 ;--------------------------------------------------------
                             53 ; global & static initialisations
                             54 ;--------------------------------------------------------
                             55 	.area _HOME
                             56 	.area _GSINIT
                             57 	.area _GSFINAL
                             58 	.area _GSINIT
                             59 ;--------------------------------------------------------
                             60 ; Home
                             61 ;--------------------------------------------------------
                             62 	.area _HOME
                             63 	.area _HOME
                             64 ;--------------------------------------------------------
                             65 ; code
                             66 ;--------------------------------------------------------
                             67 	.area _CODE
                             68 ;../generic/ch376s.c:8: void ch376_reset_all()
                             69 ;	---------------------------------
                             70 ; Function ch376_reset_all
                             71 ; ---------------------------------
   0000                      72 _ch376_reset_all::
                             73 ;../generic/ch376s.c:10: write_command (CMD_RESET_ALL);
   0000 2E 05         [ 7]   74 	ld	l, #0x05
   0002 CDr00r00      [17]   75 	call	_write_command
                             76 ;../generic/ch376s.c:11: delay_ms (100);
   0005 21 64 00      [10]   77 	ld	hl, #0x0064
   0008 E5            [11]   78 	push	hl
   0009 CDr00r00      [17]   79 	call	_delay_ms
   000C F1            [10]   80 	pop	af
                             81 ;../generic/ch376s.c:12: }
   000D C9            [10]   82 	ret
                             83 ;../generic/ch376s.c:13: bool ch376_plugged_in()
                             84 ;	---------------------------------
                             85 ; Function ch376_plugged_in
                             86 ; ---------------------------------
   000E                      87 _ch376_plugged_in::
                             88 ;../generic/ch376s.c:18: write_command (CMD_CHECK_EXIST);
   000E 2E 06         [ 7]   89 	ld	l, #0x06
   0010 CDr00r00      [17]   90 	call	_write_command
                             91 ;../generic/ch376s.c:19: write_data(value);
   0013 2E BE         [ 7]   92 	ld	l, #0xbe
   0015 CDr00r00      [17]   93 	call	_write_data
                             94 ;../generic/ch376s.c:20: new_value = read_data ();
   0018 CDr00r00      [17]   95 	call	_read_data
   001B 7D            [ 4]   96 	ld	a, l
                             97 ;../generic/ch376s.c:23: if (new_value != value)
   001C D6 41         [ 7]   98 	sub	a, #0x41
                             99 ;../generic/ch376s.c:24: return false;
                            100 ;../generic/ch376s.c:25: return true;
   001E 2E 00         [ 7]  101 	ld	l, #0x00
   0020 C0            [11]  102 	ret	NZ
   0021 2E 01         [ 7]  103 	ld	l, #0x01
                            104 ;../generic/ch376s.c:26: }
   0023 C9            [10]  105 	ret
                            106 ;../generic/ch376s.c:27: bool ch376_set_usb_host_mode(uint8_t mode)
                            107 ;	---------------------------------
                            108 ; Function ch376_set_usb_host_mode
                            109 ; ---------------------------------
   0024                     110 _ch376_set_usb_host_mode::
                            111 ;../generic/ch376s.c:29: write_command(CMD_SET_USB_MODE);
   0024 2E 15         [ 7]  112 	ld	l, #0x15
   0026 CDr00r00      [17]  113 	call	_write_command
                            114 ;../generic/ch376s.c:30: write_data(mode);
   0029 FD 21 02 00   [14]  115 	ld	iy, #2
   002D FD 39         [15]  116 	add	iy, sp
   002F FD 6E 00      [19]  117 	ld	l, 0 (iy)
   0032 CDr00r00      [17]  118 	call	_write_data
                            119 ;../generic/ch376s.c:31: delay_ms (250);
   0035 21 FA 00      [10]  120 	ld	hl, #0x00fa
   0038 E5            [11]  121 	push	hl
   0039 CDr00r00      [17]  122 	call	_delay_ms
   003C F1            [10]  123 	pop	af
                            124 ;../generic/ch376s.c:33: value = read_data();
   003D CDr00r00      [17]  125 	call	_read_data
   0040 7D            [ 4]  126 	ld	a, l
                            127 ;../generic/ch376s.c:34: if ( value == CMD_RET_SUCCESS )
   0041 D6 51         [ 7]  128 	sub	a, #0x51
                            129 ;../generic/ch376s.c:35: return true;
                            130 ;../generic/ch376s.c:36: return false;
   0043 2E 01         [ 7]  131 	ld	l, #0x01
   0045 C8            [11]  132 	ret	Z
   0046 2E 00         [ 7]  133 	ld	l, #0x00
                            134 ;../generic/ch376s.c:37: }
   0048 C9            [10]  135 	ret
                            136 ;../generic/ch376s.c:38: bool ch376_connect_disk ()
                            137 ;	---------------------------------
                            138 ; Function ch376_connect_disk
                            139 ; ---------------------------------
   0049                     140 _ch376_connect_disk::
                            141 ;../generic/ch376s.c:40: write_command (CMD_DISK_CONNECT);
   0049 2E 30         [ 7]  142 	ld	l, #0x30
   004B CDr00r00      [17]  143 	call	_write_command
                            144 ;../generic/ch376s.c:41: if (ch376_wait_status ()!=USB_INT_SUCCESS)
   004E CDr6Br00      [17]  145 	call	_ch376_wait_status
   0051 7D            [ 4]  146 	ld	a, l
   0052 D6 14         [ 7]  147 	sub	a, #0x14
                            148 ;../generic/ch376s.c:42: return false;
                            149 ;../generic/ch376s.c:43: return true;
   0054 2E 00         [ 7]  150 	ld	l, #0x00
   0056 C0            [11]  151 	ret	NZ
   0057 2E 01         [ 7]  152 	ld	l, #0x01
                            153 ;../generic/ch376s.c:44: }
   0059 C9            [10]  154 	ret
                            155 ;../generic/ch376s.c:45: bool ch376_mount_disk ()
                            156 ;	---------------------------------
                            157 ; Function ch376_mount_disk
                            158 ; ---------------------------------
   005A                     159 _ch376_mount_disk::
                            160 ;../generic/ch376s.c:47: write_command (CMD_DISK_MOUNT);
   005A 2E 31         [ 7]  161 	ld	l, #0x31
   005C CDr00r00      [17]  162 	call	_write_command
                            163 ;../generic/ch376s.c:48: if (ch376_wait_status ()!=USB_INT_SUCCESS)
   005F CDr6Br00      [17]  164 	call	_ch376_wait_status
   0062 7D            [ 4]  165 	ld	a, l
   0063 D6 14         [ 7]  166 	sub	a, #0x14
                            167 ;../generic/ch376s.c:49: return false;
                            168 ;../generic/ch376s.c:50: return true;
   0065 2E 00         [ 7]  169 	ld	l, #0x00
   0067 C0            [11]  170 	ret	NZ
   0068 2E 01         [ 7]  171 	ld	l, #0x01
                            172 ;../generic/ch376s.c:51: }
   006A C9            [10]  173 	ret
                            174 ;../generic/ch376s.c:53: uint8_t ch376_wait_status ()
                            175 ;	---------------------------------
                            176 ; Function ch376_wait_status
                            177 ; ---------------------------------
   006B                     178 _ch376_wait_status::
                            179 ;../generic/ch376s.c:58: while (true)
   006B                     180 00104$:
                            181 ;../generic/ch376s.c:60: interrupt=read_status();
   006B CDr00r00      [17]  182 	call	_read_status
   006E 7D            [ 4]  183 	ld	a, l
                            184 ;../generic/ch376s.c:61: if ((interrupt&0x80)==0)
   006F 07            [ 4]  185 	rlca
   0070 38 F9         [12]  186 	jr	C,00104$
                            187 ;../generic/ch376s.c:68: write_command(CMD_GET_STATUS);
   0072 2E 22         [ 7]  188 	ld	l, #0x22
   0074 CDr00r00      [17]  189 	call	_write_command
                            190 ;../generic/ch376s.c:69: return read_data ();
                            191 ;../generic/ch376s.c:70: }
   0077 C3r00r00      [10]  192 	jp	_read_data
                            193 ;../generic/ch376s.c:72: uint8_t ch376_get_register_value (uint8_t reg)
                            194 ;	---------------------------------
                            195 ; Function ch376_get_register_value
                            196 ; ---------------------------------
   007A                     197 _ch376_get_register_value::
                            198 ;../generic/ch376s.c:74: write_command (CMD_GET_REGISTER);
   007A 2E 0A         [ 7]  199 	ld	l, #0x0a
   007C CDr00r00      [17]  200 	call	_write_command
                            201 ;../generic/ch376s.c:75: write_data (reg); 
   007F FD 21 02 00   [14]  202 	ld	iy, #2
   0083 FD 39         [15]  203 	add	iy, sp
   0085 FD 6E 00      [19]  204 	ld	l, 0 (iy)
   0088 CDr00r00      [17]  205 	call	_write_data
                            206 ;../generic/ch376s.c:76: return read_data ();
                            207 ;../generic/ch376s.c:77: }
   008B C3r00r00      [10]  208 	jp	_read_data
                            209 ;../generic/ch376s.c:79: void ch376_set_filename (char* name)
                            210 ;	---------------------------------
                            211 ; Function ch376_set_filename
                            212 ; ---------------------------------
   008E                     213 _ch376_set_filename::
                            214 ;../generic/ch376s.c:81: write_command (CMD_SET_FILE_NAME);
   008E 2E 2F         [ 7]  215 	ld	l, #0x2f
   0090 CDr00r00      [17]  216 	call	_write_command
                            217 ;../generic/ch376s.c:82: write_data_multiple ((uint8_t*) name,strlen(name));
   0093 C1            [10]  218 	pop	bc
   0094 E1            [10]  219 	pop	hl
   0095 E5            [11]  220 	push	hl
   0096 C5            [11]  221 	push	bc
   0097 E5            [11]  222 	push	hl
   0098 CDr00r00      [17]  223 	call	_strlen
   009B F1            [10]  224 	pop	af
   009C 7D            [ 4]  225 	ld	a, l
   009D F5            [11]  226 	push	af
   009E 33            [ 6]  227 	inc	sp
   009F 21 03 00      [10]  228 	ld	hl, #3
   00A2 39            [11]  229 	add	hl, sp
   00A3 4E            [ 7]  230 	ld	c, (hl)
   00A4 23            [ 6]  231 	inc	hl
   00A5 46            [ 7]  232 	ld	b, (hl)
   00A6 C5            [11]  233 	push	bc
   00A7 CDr00r00      [17]  234 	call	_write_data_multiple
   00AA F1            [10]  235 	pop	af
   00AB 33            [ 6]  236 	inc	sp
                            237 ;../generic/ch376s.c:83: write_data (0);
   00AC 2E 00         [ 7]  238 	ld	l, #0x00
                            239 ;../generic/ch376s.c:84: }
   00AE C3r00r00      [10]  240 	jp	_write_data
                            241 ;../generic/ch376s.c:85: bool ch376_open_file ()
                            242 ;	---------------------------------
                            243 ; Function ch376_open_file
                            244 ; ---------------------------------
   00B1                     245 _ch376_open_file::
                            246 ;../generic/ch376s.c:87: write_command (CMD_OPEN_FILE);
   00B1 2E 32         [ 7]  247 	ld	l, #0x32
   00B3 CDr00r00      [17]  248 	call	_write_command
                            249 ;../generic/ch376s.c:88: if (ch376_wait_status ()!=USB_INT_SUCCESS)
   00B6 CDr6Br00      [17]  250 	call	_ch376_wait_status
   00B9 7D            [ 4]  251 	ld	a, l
   00BA D6 14         [ 7]  252 	sub	a, #0x14
                            253 ;../generic/ch376s.c:89: return false;
                            254 ;../generic/ch376s.c:90: return true;
   00BC 2E 00         [ 7]  255 	ld	l, #0x00
   00BE C0            [11]  256 	ret	NZ
   00BF 2E 01         [ 7]  257 	ld	l, #0x01
                            258 ;../generic/ch376s.c:91: }
   00C1 C9            [10]  259 	ret
                            260 ;../generic/ch376s.c:92: bool ch376_close_file ()
                            261 ;	---------------------------------
                            262 ; Function ch376_close_file
                            263 ; ---------------------------------
   00C2                     264 _ch376_close_file::
                            265 ;../generic/ch376s.c:94: write_command (CMD_CLOSE_FILE);
   00C2 2E 36         [ 7]  266 	ld	l, #0x36
   00C4 CDr00r00      [17]  267 	call	_write_command
                            268 ;../generic/ch376s.c:95: write_data (0);
   00C7 2E 00         [ 7]  269 	ld	l, #0x00
   00C9 CDr00r00      [17]  270 	call	_write_data
                            271 ;../generic/ch376s.c:96: if (ch376_wait_status ()!=USB_INT_SUCCESS)
   00CC CDr6Br00      [17]  272 	call	_ch376_wait_status
   00CF 7D            [ 4]  273 	ld	a, l
   00D0 D6 14         [ 7]  274 	sub	a, #0x14
                            275 ;../generic/ch376s.c:97: return false;
                            276 ;../generic/ch376s.c:98: return true;
   00D2 2E 00         [ 7]  277 	ld	l, #0x00
   00D4 C0            [11]  278 	ret	NZ
   00D5 2E 01         [ 7]  279 	ld	l, #0x01
                            280 ;../generic/ch376s.c:99: }
   00D7 C9            [10]  281 	ret
                            282 ;../generic/ch376s.c:100: bool ch376_open_directory ()
                            283 ;	---------------------------------
                            284 ; Function ch376_open_directory
                            285 ; ---------------------------------
   00D8                     286 _ch376_open_directory::
                            287 ;../generic/ch376s.c:102: write_command (CMD_OPEN_FILE);
   00D8 2E 32         [ 7]  288 	ld	l, #0x32
   00DA CDr00r00      [17]  289 	call	_write_command
                            290 ;../generic/ch376s.c:103: if (ch376_wait_status ()!=USB_ERR_OPEN_DIR)
   00DD CDr6Br00      [17]  291 	call	_ch376_wait_status
   00E0 7D            [ 4]  292 	ld	a, l
   00E1 D6 41         [ 7]  293 	sub	a, #0x41
                            294 ;../generic/ch376s.c:104: return false;
                            295 ;../generic/ch376s.c:105: return true;
   00E3 2E 00         [ 7]  296 	ld	l, #0x00
   00E5 C0            [11]  297 	ret	NZ
   00E6 2E 01         [ 7]  298 	ld	l, #0x01
                            299 ;../generic/ch376s.c:106: }
   00E8 C9            [10]  300 	ret
                            301 ;../generic/ch376s.c:107: bool ch376_open_search ()
                            302 ;	---------------------------------
                            303 ; Function ch376_open_search
                            304 ; ---------------------------------
   00E9                     305 _ch376_open_search::
                            306 ;../generic/ch376s.c:110: write_command (CMD_OPEN_FILE);
   00E9 2E 32         [ 7]  307 	ld	l, #0x32
   00EB CDr00r00      [17]  308 	call	_write_command
                            309 ;../generic/ch376s.c:111: if (ch376_wait_status ()!=USB_INT_DISK_READ)
   00EE CDr6Br00      [17]  310 	call	_ch376_wait_status
   00F1 7D            [ 4]  311 	ld	a, l
   00F2 D6 1D         [ 7]  312 	sub	a, #0x1d
                            313 ;../generic/ch376s.c:112: return false;
                            314 ;../generic/ch376s.c:113: return true;
   00F4 2E 00         [ 7]  315 	ld	l, #0x00
   00F6 C0            [11]  316 	ret	NZ
   00F7 2E 01         [ 7]  317 	ld	l, #0x01
                            318 ;../generic/ch376s.c:114: }
   00F9 C9            [10]  319 	ret
                            320 ;../generic/ch376s.c:115: bool ch376_next_search ()
                            321 ;	---------------------------------
                            322 ; Function ch376_next_search
                            323 ; ---------------------------------
   00FA                     324 _ch376_next_search::
                            325 ;../generic/ch376s.c:118: write_command (CMD_FILE_ENUM_GO);
   00FA 2E 33         [ 7]  326 	ld	l, #0x33
   00FC CDr00r00      [17]  327 	call	_write_command
                            328 ;../generic/ch376s.c:119: if (ch376_wait_status ()!=USB_INT_DISK_READ)
   00FF CDr6Br00      [17]  329 	call	_ch376_wait_status
   0102 7D            [ 4]  330 	ld	a, l
   0103 D6 1D         [ 7]  331 	sub	a, #0x1d
                            332 ;../generic/ch376s.c:120: return false;
                            333 ;../generic/ch376s.c:121: return true;
   0105 2E 00         [ 7]  334 	ld	l, #0x00
   0107 C0            [11]  335 	ret	NZ
   0108 2E 01         [ 7]  336 	ld	l, #0x01
                            337 ;../generic/ch376s.c:122: }
   010A C9            [10]  338 	ret
                            339 ;../generic/ch376s.c:123: void ch376_get_fat_info (fat_dir_info_t* info)
                            340 ;	---------------------------------
                            341 ; Function ch376_get_fat_info
                            342 ; ---------------------------------
   010B                     343 _ch376_get_fat_info::
                            344 ;../generic/ch376s.c:126: write_command(CMD_RD_USB_DATA);
   010B 2E 27         [ 7]  345 	ld	l, #0x27
   010D CDr00r00      [17]  346 	call	_write_command
                            347 ;../generic/ch376s.c:127: uint8_t len = read_data();
   0110 CDr00r00      [17]  348 	call	_read_data
   0113 65            [ 4]  349 	ld	h, l
                            350 ;../generic/ch376s.c:128: read_data_multiple ((uint8_t*) info,len);
   0114 D1            [10]  351 	pop	de
   0115 C1            [10]  352 	pop	bc
   0116 C5            [11]  353 	push	bc
   0117 D5            [11]  354 	push	de
   0118 E5            [11]  355 	push	hl
   0119 33            [ 6]  356 	inc	sp
   011A C5            [11]  357 	push	bc
   011B CDr00r00      [17]  358 	call	_read_data_multiple
   011E F1            [10]  359 	pop	af
   011F 33            [ 6]  360 	inc	sp
                            361 ;../generic/ch376s.c:129: }
   0120 C9            [10]  362 	ret
                            363 ;../generic/ch376s.c:131: bool ch376_locate_sector (uint8_t* sector)
                            364 ;	---------------------------------
                            365 ; Function ch376_locate_sector
                            366 ; ---------------------------------
   0121                     367 _ch376_locate_sector::
                            368 ;../generic/ch376s.c:133: write_command (CMD_SEC_LOCATE);
   0121 2E 4A         [ 7]  369 	ld	l, #0x4a
   0123 CDr00r00      [17]  370 	call	_write_command
                            371 ;../generic/ch376s.c:134: write_data (sector[0]);
   0126 D1            [10]  372 	pop	de
   0127 C1            [10]  373 	pop	bc
   0128 C5            [11]  374 	push	bc
   0129 D5            [11]  375 	push	de
   012A 0A            [ 7]  376 	ld	a, (bc)
   012B 6F            [ 4]  377 	ld	l, a
   012C C5            [11]  378 	push	bc
   012D CDr00r00      [17]  379 	call	_write_data
   0130 C1            [10]  380 	pop	bc
                            381 ;../generic/ch376s.c:135: write_data (sector[1]);
   0131 69            [ 4]  382 	ld	l, c
   0132 60            [ 4]  383 	ld	h, b
   0133 23            [ 6]  384 	inc	hl
   0134 6E            [ 7]  385 	ld	l, (hl)
   0135 C5            [11]  386 	push	bc
   0136 CDr00r00      [17]  387 	call	_write_data
   0139 C1            [10]  388 	pop	bc
                            389 ;../generic/ch376s.c:136: write_data (sector[2]);
   013A 69            [ 4]  390 	ld	l, c
   013B 60            [ 4]  391 	ld	h, b
   013C 23            [ 6]  392 	inc	hl
   013D 23            [ 6]  393 	inc	hl
   013E 6E            [ 7]  394 	ld	l, (hl)
   013F C5            [11]  395 	push	bc
   0140 CDr00r00      [17]  396 	call	_write_data
                            397 ;../generic/ch376s.c:137: write_data (sector[3]);
   0143 E1            [10]  398 	pop	hl
   0144 23            [ 6]  399 	inc	hl
   0145 23            [ 6]  400 	inc	hl
   0146 23            [ 6]  401 	inc	hl
   0147 6E            [ 7]  402 	ld	l, (hl)
   0148 CDr00r00      [17]  403 	call	_write_data
                            404 ;../generic/ch376s.c:139: if (ch376_wait_status ()!=USB_INT_SUCCESS)
   014B CDr6Br00      [17]  405 	call	_ch376_wait_status
   014E 7D            [ 4]  406 	ld	a, l
   014F D6 14         [ 7]  407 	sub	a, #0x14
                            408 ;../generic/ch376s.c:140: return false;
                            409 ;../generic/ch376s.c:141: return true;    
   0151 2E 00         [ 7]  410 	ld	l, #0x00
   0153 C0            [11]  411 	ret	NZ
   0154 2E 01         [ 7]  412 	ld	l, #0x01
                            413 ;../generic/ch376s.c:142: }
   0156 C9            [10]  414 	ret
                            415 ;../generic/ch376s.c:144: bool ch376_get_sector_LBA (uint8_t nr_sectors,uint8_t* sectors_allowed_lba)
                            416 ;	---------------------------------
                            417 ; Function ch376_get_sector_LBA
                            418 ; ---------------------------------
   0157                     419 _ch376_get_sector_LBA::
                            420 ;../generic/ch376s.c:146: write_command (CMD_SEC_READ);
   0157 2E 4B         [ 7]  421 	ld	l, #0x4b
   0159 CDr00r00      [17]  422 	call	_write_command
                            423 ;../generic/ch376s.c:147: write_data (nr_sectors);
   015C FD 21 02 00   [14]  424 	ld	iy, #2
   0160 FD 39         [15]  425 	add	iy, sp
   0162 FD 6E 00      [19]  426 	ld	l, 0 (iy)
   0165 CDr00r00      [17]  427 	call	_write_data
                            428 ;../generic/ch376s.c:148: if (ch376_wait_status ()!=USB_INT_SUCCESS)
   0168 CDr6Br00      [17]  429 	call	_ch376_wait_status
   016B 7D            [ 4]  430 	ld	a, l
   016C D6 14         [ 7]  431 	sub	a, #0x14
   016E 28 03         [12]  432 	jr	Z,00102$
                            433 ;../generic/ch376s.c:149: return false;
   0170 2E 00         [ 7]  434 	ld	l, #0x00
   0172 C9            [10]  435 	ret
   0173                     436 00102$:
                            437 ;../generic/ch376s.c:154: write_command(CMD_RD_USB_DATA);
   0173 2E 27         [ 7]  438 	ld	l, #0x27
   0175 CDr00r00      [17]  439 	call	_write_command
                            440 ;../generic/ch376s.c:155: uint8_t len = read_data();
   0178 CDr00r00      [17]  441 	call	_read_data
   017B 7D            [ 4]  442 	ld	a, l
                            443 ;../generic/ch376s.c:156: read_data_multiple (sectors_allowed_lba,len);
   017C F5            [11]  444 	push	af
   017D 33            [ 6]  445 	inc	sp
   017E 21 04 00      [10]  446 	ld	hl, #4
   0181 39            [11]  447 	add	hl, sp
   0182 4E            [ 7]  448 	ld	c, (hl)
   0183 23            [ 6]  449 	inc	hl
   0184 46            [ 7]  450 	ld	b, (hl)
   0185 C5            [11]  451 	push	bc
   0186 CDr00r00      [17]  452 	call	_read_data_multiple
   0189 F1            [10]  453 	pop	af
   018A 33            [ 6]  454 	inc	sp
                            455 ;../generic/ch376s.c:158: return true;
   018B 2E 01         [ 7]  456 	ld	l, #0x01
                            457 ;../generic/ch376s.c:159: }
   018D C9            [10]  458 	ret
                            459 ;../generic/ch376s.c:161: bool ch376s_disk_read (uint8_t nr_sectors,uint8_t* lba,uint8_t* sector_buffer)
                            460 ;	---------------------------------
                            461 ; Function ch376s_disk_read
                            462 ; ---------------------------------
   018E                     463 _ch376s_disk_read::
                            464 ;../generic/ch376s.c:163: write_command (CMD_DISK_READ);
   018E 2E 54         [ 7]  465 	ld	l, #0x54
   0190 CDr00r00      [17]  466 	call	_write_command
                            467 ;../generic/ch376s.c:164: write_data (lba[0]);
   0193 21 03 00      [10]  468 	ld	hl, #3
   0196 39            [11]  469 	add	hl, sp
   0197 4E            [ 7]  470 	ld	c, (hl)
   0198 23            [ 6]  471 	inc	hl
   0199 46            [ 7]  472 	ld	b, (hl)
   019A 0A            [ 7]  473 	ld	a, (bc)
   019B 6F            [ 4]  474 	ld	l, a
   019C C5            [11]  475 	push	bc
   019D CDr00r00      [17]  476 	call	_write_data
   01A0 C1            [10]  477 	pop	bc
                            478 ;../generic/ch376s.c:165: write_data (lba[1]);
   01A1 69            [ 4]  479 	ld	l, c
   01A2 60            [ 4]  480 	ld	h, b
   01A3 23            [ 6]  481 	inc	hl
   01A4 6E            [ 7]  482 	ld	l, (hl)
   01A5 C5            [11]  483 	push	bc
   01A6 CDr00r00      [17]  484 	call	_write_data
   01A9 C1            [10]  485 	pop	bc
                            486 ;../generic/ch376s.c:166: write_data (lba[2]);
   01AA 69            [ 4]  487 	ld	l, c
   01AB 60            [ 4]  488 	ld	h, b
   01AC 23            [ 6]  489 	inc	hl
   01AD 23            [ 6]  490 	inc	hl
   01AE 6E            [ 7]  491 	ld	l, (hl)
   01AF C5            [11]  492 	push	bc
   01B0 CDr00r00      [17]  493 	call	_write_data
                            494 ;../generic/ch376s.c:167: write_data (lba[3]);
   01B3 E1            [10]  495 	pop	hl
   01B4 23            [ 6]  496 	inc	hl
   01B5 23            [ 6]  497 	inc	hl
   01B6 23            [ 6]  498 	inc	hl
   01B7 6E            [ 7]  499 	ld	l, (hl)
   01B8 CDr00r00      [17]  500 	call	_write_data
                            501 ;../generic/ch376s.c:168: write_data (nr_sectors);
   01BB FD 21 02 00   [14]  502 	ld	iy, #2
   01BF FD 39         [15]  503 	add	iy, sp
   01C1 FD 6E 00      [19]  504 	ld	l, 0 (iy)
   01C4 CDr00r00      [17]  505 	call	_write_data
                            506 ;../generic/ch376s.c:170: do
   01C7                     507 00105$:
                            508 ;../generic/ch376s.c:172: uint8_t status = ch376_wait_status ();
   01C7 CDr6Br00      [17]  509 	call	_ch376_wait_status
   01CA 7D            [ 4]  510 	ld	a, l
                            511 ;../generic/ch376s.c:174: if (status==USB_INT_SUCCESS)
   01CB FE 14         [ 7]  512 	cp	a, #0x14
   01CD 20 03         [12]  513 	jr	NZ,00102$
                            514 ;../generic/ch376s.c:175: return true;
   01CF 2E 01         [ 7]  515 	ld	l, #0x01
   01D1 C9            [10]  516 	ret
   01D2                     517 00102$:
                            518 ;../generic/ch376s.c:176: if (status!=USB_INT_DISK_READ)
   01D2 D6 1D         [ 7]  519 	sub	a, #0x1d
   01D4 28 03         [12]  520 	jr	Z,00104$
                            521 ;../generic/ch376s.c:177: return false;
   01D6 2E 00         [ 7]  522 	ld	l, #0x00
   01D8 C9            [10]  523 	ret
   01D9                     524 00104$:
                            525 ;../generic/ch376s.c:179: write_command(CMD_RD_USB_DATA);
   01D9 2E 27         [ 7]  526 	ld	l, #0x27
   01DB CDr00r00      [17]  527 	call	_write_command
                            528 ;../generic/ch376s.c:180: uint8_t len = read_data();
   01DE CDr00r00      [17]  529 	call	_read_data
   01E1 45            [ 4]  530 	ld	b, l
                            531 ;../generic/ch376s.c:181: read_data_multiple (sector_buffer,len);
   01E2 C5            [11]  532 	push	bc
   01E3 C5            [11]  533 	push	bc
   01E4 33            [ 6]  534 	inc	sp
   01E5 21 08 00      [10]  535 	ld	hl, #8
   01E8 39            [11]  536 	add	hl, sp
   01E9 4E            [ 7]  537 	ld	c, (hl)
   01EA 23            [ 6]  538 	inc	hl
   01EB 46            [ 7]  539 	ld	b, (hl)
   01EC C5            [11]  540 	push	bc
   01ED CDr00r00      [17]  541 	call	_read_data_multiple
   01F0 F1            [10]  542 	pop	af
   01F1 33            [ 6]  543 	inc	sp
   01F2 C1            [10]  544 	pop	bc
                            545 ;../generic/ch376s.c:182: sector_buffer+=len;
   01F3 21 05 00      [10]  546 	ld	hl, #5
   01F6 39            [11]  547 	add	hl, sp
   01F7 7E            [ 7]  548 	ld	a, (hl)
   01F8 80            [ 4]  549 	add	a, b
   01F9 77            [ 7]  550 	ld	(hl), a
   01FA 30 02         [12]  551 	jr	NC,00128$
   01FC 23            [ 6]  552 	inc	hl
   01FD 34            [11]  553 	inc	(hl)
   01FE                     554 00128$:
                            555 ;../generic/ch376s.c:183: write_command (CMD_DISK_RD_GO);
   01FE 2E 55         [ 7]  556 	ld	l, #0x55
   0200 CDr00r00      [17]  557 	call	_write_command
                            558 ;../generic/ch376s.c:185: while (true);
                            559 ;../generic/ch376s.c:186: }
   0203 18 C2         [12]  560 	jr	00105$
                            561 ;../generic/ch376s.c:188: bool ch376s_disk_write (uint8_t nr_sectors,uint8_t* lba,uint8_t* sector_buffer)
                            562 ;	---------------------------------
                            563 ; Function ch376s_disk_write
                            564 ; ---------------------------------
   0205                     565 _ch376s_disk_write::
   0205 DD E5         [15]  566 	push	ix
   0207 DD 21 00 00   [14]  567 	ld	ix,#0
   020B DD 39         [15]  568 	add	ix,sp
                            569 ;../generic/ch376s.c:190: write_command (CMD_DISK_WRITE);
   020D 2E 56         [ 7]  570 	ld	l, #0x56
   020F CDr00r00      [17]  571 	call	_write_command
                            572 ;../generic/ch376s.c:191: write_data (lba[0]);
   0212 DD 4E 05      [19]  573 	ld	c, 5 (ix)
   0215 DD 46 06      [19]  574 	ld	b, 6 (ix)
   0218 0A            [ 7]  575 	ld	a, (bc)
   0219 6F            [ 4]  576 	ld	l, a
   021A C5            [11]  577 	push	bc
   021B CDr00r00      [17]  578 	call	_write_data
   021E C1            [10]  579 	pop	bc
                            580 ;../generic/ch376s.c:192: write_data (lba[1]);
   021F 69            [ 4]  581 	ld	l, c
   0220 60            [ 4]  582 	ld	h, b
   0221 23            [ 6]  583 	inc	hl
   0222 6E            [ 7]  584 	ld	l, (hl)
   0223 C5            [11]  585 	push	bc
   0224 CDr00r00      [17]  586 	call	_write_data
   0227 C1            [10]  587 	pop	bc
                            588 ;../generic/ch376s.c:193: write_data (lba[2]);
   0228 69            [ 4]  589 	ld	l, c
   0229 60            [ 4]  590 	ld	h, b
   022A 23            [ 6]  591 	inc	hl
   022B 23            [ 6]  592 	inc	hl
   022C 6E            [ 7]  593 	ld	l, (hl)
   022D C5            [11]  594 	push	bc
   022E CDr00r00      [17]  595 	call	_write_data
                            596 ;../generic/ch376s.c:194: write_data (lba[3]);
   0231 E1            [10]  597 	pop	hl
   0232 23            [ 6]  598 	inc	hl
   0233 23            [ 6]  599 	inc	hl
   0234 23            [ 6]  600 	inc	hl
   0235 6E            [ 7]  601 	ld	l, (hl)
   0236 CDr00r00      [17]  602 	call	_write_data
                            603 ;../generic/ch376s.c:195: write_data (nr_sectors);
   0239 DD 6E 04      [19]  604 	ld	l, 4 (ix)
   023C CDr00r00      [17]  605 	call	_write_data
                            606 ;../generic/ch376s.c:198: uint8_t blocks = nr_sectors*(512/MAX_PACKET_LENGTH);
   023F DD 7E 04      [19]  607 	ld	a, 4 (ix)
   0242 87            [ 4]  608 	add	a, a
   0243 87            [ 4]  609 	add	a, a
   0244 87            [ 4]  610 	add	a, a
   0245 4F            [ 4]  611 	ld	c, a
                            612 ;../generic/ch376s.c:199: for (cnt_write = 0;cnt_write < blocks;cnt_write++)
   0246 DD 6E 07      [19]  613 	ld	l, 7 (ix)
   0249 DD 66 08      [19]  614 	ld	h, 8 (ix)
   024C 06 00         [ 7]  615 	ld	b, #0x00
   024E                     616 00107$:
   024E 78            [ 4]  617 	ld	a, b
   024F 91            [ 4]  618 	sub	a, c
   0250 30 44         [12]  619 	jr	NC,00105$
                            620 ;../generic/ch376s.c:201: uint8_t status = ch376_wait_status ();
   0252 E5            [11]  621 	push	hl
   0253 C5            [11]  622 	push	bc
   0254 CDr6Br00      [17]  623 	call	_ch376_wait_status
   0257 7D            [ 4]  624 	ld	a, l
   0258 C1            [10]  625 	pop	bc
   0259 E1            [10]  626 	pop	hl
                            627 ;../generic/ch376s.c:202: if (status==USB_INT_SUCCESS)
   025A FE 14         [ 7]  628 	cp	a, #0x14
   025C 20 04         [12]  629 	jr	NZ,00102$
                            630 ;../generic/ch376s.c:203: return true;
   025E 2E 01         [ 7]  631 	ld	l, #0x01
   0260 18 36         [12]  632 	jr	00109$
   0262                     633 00102$:
                            634 ;../generic/ch376s.c:204: if (status!=USB_INT_DISK_WRITE)
   0262 D6 1E         [ 7]  635 	sub	a, #0x1e
   0264 28 04         [12]  636 	jr	Z,00104$
                            637 ;../generic/ch376s.c:205: return false;
   0266 2E 00         [ 7]  638 	ld	l, #0x00
   0268 18 2E         [12]  639 	jr	00109$
   026A                     640 00104$:
                            641 ;../generic/ch376s.c:207: write_command(CMD_WR_HOST_DATA);
   026A E5            [11]  642 	push	hl
   026B C5            [11]  643 	push	bc
   026C 2E 2C         [ 7]  644 	ld	l, #0x2c
   026E CDr00r00      [17]  645 	call	_write_command
   0271 2E 40         [ 7]  646 	ld	l, #0x40
   0273 CDr00r00      [17]  647 	call	_write_data
   0276 C1            [10]  648 	pop	bc
   0277 E1            [10]  649 	pop	hl
                            650 ;../generic/ch376s.c:209: write_data_multiple (sector_buffer,MAX_PACKET_LENGTH);
   0278 E5            [11]  651 	push	hl
   0279 C5            [11]  652 	push	bc
   027A 3E 40         [ 7]  653 	ld	a, #0x40
   027C F5            [11]  654 	push	af
   027D 33            [ 6]  655 	inc	sp
   027E E5            [11]  656 	push	hl
   027F CDr00r00      [17]  657 	call	_write_data_multiple
   0282 F1            [10]  658 	pop	af
   0283 33            [ 6]  659 	inc	sp
   0284 C1            [10]  660 	pop	bc
   0285 E1            [10]  661 	pop	hl
                            662 ;../generic/ch376s.c:210: sector_buffer+=MAX_PACKET_LENGTH;
   0286 11 40 00      [10]  663 	ld	de, #0x0040
   0289 19            [11]  664 	add	hl, de
                            665 ;../generic/ch376s.c:211: write_command (CMD_DISK_WR_GO);
   028A E5            [11]  666 	push	hl
   028B C5            [11]  667 	push	bc
   028C 2E 57         [ 7]  668 	ld	l, #0x57
   028E CDr00r00      [17]  669 	call	_write_command
   0291 C1            [10]  670 	pop	bc
   0292 E1            [10]  671 	pop	hl
                            672 ;../generic/ch376s.c:199: for (cnt_write = 0;cnt_write < blocks;cnt_write++)
   0293 04            [ 4]  673 	inc	b
   0294 18 B8         [12]  674 	jr	00107$
   0296                     675 00105$:
                            676 ;../generic/ch376s.c:213: return true;
   0296 2E 01         [ 7]  677 	ld	l, #0x01
   0298                     678 00109$:
                            679 ;../generic/ch376s.c:214: }
   0298 DD E1         [14]  680 	pop	ix
   029A C9            [10]  681 	ret
                            682 	.area _CODE
                            683 	.area _INITIALIZER
                            684 	.area _CABS (ABS)
